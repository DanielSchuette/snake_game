!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BIN	Makefile	/^BIN       = snake$/;"	m
BIN_FLAGS	Makefile	/^BIN_FLAGS = 'my player name'$/;"	m
CC	Makefile	/^CC 		   = gcc$/;"	m
CCFLAGS	Makefile	/^CCFLAGS    = -Wall -Werror -Wpedantic -Wextra --std=c++20 -O0 \\$/;"	m
Context	context.cc	/^Context::Context(void)$/;"	f	class:Context
Context	context.hh	/^class Context {$/;"	c
DEBUG_INFO	Makefile	/^DEBUG_INFO = no$/;"	m
DEPS	Makefile	/^DEPS 	  = $(SRCS:.cc=.d)$/;"	m
Fruit	snake.cc	/^Fruit::Fruit(uint32_t size, uint32_t xmax, uint32_t ymax)$/;"	f	class:Fruit
Fruit	snake.hh	/^struct Fruit {$/;"	s
LDFLAGS	Makefile	/^LDFLAGS    = -lm -lSDL2_image -lpthread -lstdc++ \\$/;"	m
OBJS	Makefile	/^OBJS      = $(SRCS:.cc=.o)$/;"	m
SRCS	Makefile	/^SRCS      = main.cc context.cc snake.cc utils.cc$/;"	m
Snake	snake.cc	/^Snake::Snake(uint8_t speed) : x_dir(speed), speed(speed)$/;"	f	class:Snake
Snake	snake.hh	/^class Snake {$/;"	c
_CONTEXT_H_	context.hh	2;"	d
_SNAKE_H_	snake.hh	2;"	d
_UTILS_H_	utils.hh	2;"	d
body	snake.hh	/^    std::vector<SDL_Rect> body;$/;"	m	class:Snake
clear_renderer	context.cc	/^void Context::clear_renderer(void)$/;"	f	class:Context
context	snake.hh	/^    Context               context;$/;"	m	class:Snake
copy_and_render	context.cc	/^void Context::copy_and_render(SDL_Texture* texture, SDL_Rect* dest)$/;"	f	class:Context
end_game	snake.cc	/^void Snake::end_game(void)$/;"	f	class:Snake
fps	main.cc	/^constexpr uint32_t fps = 1000 \/ 20;$/;"	v
fruit	snake.hh	/^    Fruit                 fruit = Fruit(speed, context.get_width(),$/;"	m	class:Snake
get_head	snake.hh	/^    SDL_Rect* get_head(void)                 { return &body[0]; }$/;"	f	class:Snake
get_height	context.hh	/^    uint32_t      get_height(void) const   { return win_height; }$/;"	f	class:Context
get_renderer	context.hh	/^    SDL_Renderer* get_renderer(void) const { return renderer; }$/;"	f	class:Context
get_width	context.hh	/^    uint32_t      get_width(void) const    { return win_width; }$/;"	f	class:Context
get_win_height	snake.hh	/^    uint32_t  get_win_height(void)           { return context.get_height(); }$/;"	f	class:Snake
get_win_width	snake.hh	/^    uint32_t  get_win_width(void)            { return context.get_width(); }$/;"	f	class:Snake
get_window	context.hh	/^    SDL_Window*   get_window(void) const   { return window; }$/;"	f	class:Context
hiscore_file	snake.hh	/^    std::fstream          hiscore_file;$/;"	m	class:Snake
is_fruit_colliding	snake.cc	/^bool Snake::is_fruit_colliding(const Fruit& fruit)$/;"	f	class:Snake
is_head_colliding	snake.cc	/^bool Snake::is_head_colliding(void)$/;"	f	class:Snake
main	main.cc	/^int main(int argc, char** argv)$/;"	f
operator <<	utils.cc	/^std::ostream& operator<<(std::ostream& os, const SDL_Rect& r)$/;"	f
operator <=>	snake.cc	/^std::strong_ordering Fruit::operator<=>(const SDL_Rect& other)$/;"	f	class:Fruit
operator <=>	snake.cc	/^std::strong_ordering operator<=>(const SDL_Rect& r1, const SDL_Rect& r2)$/;"	f
play_audio	snake.cc	/^void Snake::play_audio(const char* audio_path)$/;"	f	class:Snake
player_name	main.cc	/^char* player_name;$/;"	v
player_name	snake.hh	/^    const char*           player_name;$/;"	m	class:Snake
ps_pair	snake.hh	/^typedef std::vector<std::pair<uint32_t, std::string>> ps_pair;$/;"	t
quit_on_error	context.cc	/^void Context::quit_on_error(const char* msg) const$/;"	f	class:Context
read_scores_from_file	snake.cc	/^ps_pair Snake::read_scores_from_file(void)$/;"	f	class:Snake
rect	snake.hh	/^    SDL_Rect rect;$/;"	m	struct:Fruit
render_present	context.hh	/^    void          render_present(void)     { SDL_RenderPresent(renderer); }$/;"	f	class:Context
renderer	context.hh	/^    SDL_Renderer*   renderer  = nullptr;$/;"	m	class:Context
save_score_to_file	snake.cc	/^void Snake::save_score_to_file(uint32_t score)$/;"	f	class:Snake
set_player_name	snake.hh	/^    void      set_player_name(const char* n) { player_name = n; }$/;"	f	class:Snake
show	snake.cc	/^void Snake::show(void)$/;"	f	class:Snake
speed	snake.hh	/^    uint8_t               speed = 20;$/;"	m	class:Snake
texture_from_surface	snake.cc	/^SDL_Texture* texture_from_surface(const char* path, const Context& ctx)$/;"	f
title	context.hh	/^    const char*     title     = "Snake Game";$/;"	m	class:Context
update_head	snake.cc	/^void Snake::update_head(void)$/;"	f	class:Snake
update_x	snake.cc	/^void Snake::update_x(int8_t scale)$/;"	f	class:Snake
update_y	snake.cc	/^void Snake::update_y(int8_t scale)$/;"	f	class:Snake
win_height	context.hh	/^    const uint32_t win_height = 640;$/;"	m	class:Context
win_width	context.hh	/^    const uint32_t win_width  = 800;$/;"	m	class:Context
win_x_pos	context.hh	/^    const uint32_t win_x_pos  = SDL_WINDOWPOS_CENTERED;$/;"	m	class:Context
win_y_pos	context.hh	/^    const uint32_t win_y_pos  = SDL_WINDOWPOS_CENTERED;$/;"	m	class:Context
window	context.hh	/^    SDL_Window*     window    = nullptr;$/;"	m	class:Context
x_dir	snake.hh	/^    uint32_t              x_dir = 0;$/;"	m	class:Snake
y_dir	snake.hh	/^    uint32_t              y_dir = 0;$/;"	m	class:Snake
~Context	context.cc	/^Context::~Context(void)$/;"	f	class:Context
